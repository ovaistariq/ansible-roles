---
# tasks file for mysql_tests
- name: include os specific variables
  include_vars: "{{ ansible_os_family }}-{{ ansible_distribution_major_version }}.yml"

- name: include RedHat specific tasks
  include: RedHat.yml
  when: ansible_os_family == 'RedHat'

- name: Check for unsupported target operating system
  fail:
    msg: "The operating system of the target machine ({{ inventory_hostname }}) is not currently supported."
  when: mysql_supported_os is not defined

- name: install required tools
  include: tools_install.yml

- name: fetch the current datetime
  shell: date '+%Y_%m_%d_%H_%M_%S'
  register: current_datetime

- name: capture MySQL production workload
  local_action: >
    script mysql_workload_capture.sh
    --master-host {{ mysql_master_host }}
    --target-host {{ hostvars[inventory_hostname]['ansible_hostname'] }}
    --tcpdump-seconds {{ benchmark_seconds }}
    --target-tmpdir {{ target_tmpdir }}/{{ current_datetime.stdout }}
    --output-dir {{ output_dir }}/{{ current_datetime.stdout }}

- name: replay MySQL production workload to gauge MySQL performance with cold caches
  local_action: >
    script mysql_workload_replay.sh
    --master-host {{ mysql_master_host }}
    --compare-host {{ mysql_compare_host }}
    --target-host {{ hostvars[inventory_hostname]['ansible_hostname'] }}
    --output-dir {{ output_dir }}/{{ current_datetime.stdout }}
    --mysql-user {{ mysql_ro_username }}
    --mysql-password {{ mysql_ro_password }}
    --cold-run
  when: run_workload_replay_test == "yes" and benchmark_cold_run == "yes"

- name: replay MySQL production workload to gauge MySQL performance with warm caches
  local_action: >
    script mysql_workload_replay.sh
    --master-host {{ mysql_master_host }}
    --compare-host {{ mysql_compare_host }}
    --target-host {{ hostvars[inventory_hostname]['ansible_hostname'] }}
    --output-dir {{ output_dir }}/{{ current_datetime.stdout }}
    --mysql-user {{ mysql_ro_username }}
    --mysql-password {{ mysql_ro_password }}
  when: run_workload_replay_test == "yes" and benchmark_cold_run != "yes"

- name: run pt-upgrade tests
  local_action: >
    script pt_upgrade_test.sh
    --master-host {{ mysql_master_host }}
    --compare-host {{ mysql_compare_host }}
    --target-host {{ hostvars[inventory_hostname]['ansible_hostname'] }}
    --output-dir {{ output_dir }}/{{ current_datetime.stdout }}
    --mysql-user {{ mysql_ro_username }}
    --mysql-password {{ mysql_ro_password }}
  when: run_pt_upgrade_test == "yes"

- name: cleanup the files created by the tests
  local_action: >
    script cleanup.sh
    --master-host {{ mysql_master_host }}
    --compare-host {{ mysql_compare_host }}
    --target-host {{ hostvars[inventory_hostname]['ansible_hostname'] }}
    --output-dir {{ output_dir }}/{{ current_datetime.stdout }}
  when: do_cleanup_after_tests == "yes"